@model WorldBook.ViewModel.CartViewModel
@{
    ViewData["Title"] = "Your Shopping Cart";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}

<div class="container my-5">
    <h2 class="mb-4">
        <i class="fas fa-shopping-cart"></i> Your Shopping Cart
    </h2>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="row">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    @foreach (var item in Model.Items)
                    {
                        <div class="cart-item border-bottom py-3" data-book-id="@item.BookId">
                            <div class="row align-items-center">
                                <div class="col-md-2">
                                    <img src="@item.ImageUrl" alt="@item.BookName" class="img-fluid rounded">
                                </div>
                                <div class="col-md-4">
                                    <h5 class="mb-1">@item.BookName</h5>
                                    @if (!string.IsNullOrEmpty(item.PublisherName))
                                    {
                                        <p class="text-muted small mb-0">
                                            <i class="fas fa-building"></i> @item.PublisherName
                                        </p>
                                    }
                                    <p class="text-muted small">In stock: @item.AvailableStock copies</p>
                                </div>
                                <div class="col-md-2 text-center">
                                    <p class="fw-bold text-danger mb-0">
                                        @item.BookPrice.ToString("N0") $
                                    </p>
                                </div>
                                <div class="col-md-2">
                                    <div class="input-group input-group-sm">
                                        <button class="btn btn-outline-secondary btn-decrease" type="button" data-book-id="@item.BookId">
                                            –
                                        </button>
                                        <input type="number" class="form-control text-center quantity-input"
                                               value="@item.Quantity" min="1" max="@item.AvailableStock"
                                               data-book-id="@item.BookId">
                                        <button class="btn btn-outline-secondary btn-increase" type="button"
                                                data-book-id="@item.BookId" data-max="@item.AvailableStock">
                                            +
                                        </button>
                                    </div>
                                </div>
                                <div class="col-md-2 text-end">
                                    <p class="fw-bold mb-2 item-subtotal">
                                        @item.Subtotal.ToString("N0") $
                                    </p>
                                    <button class="btn btn-sm btn-danger btn-remove" data-book-id="@item.BookId">
                                        <i class="fas fa-trash"></i> Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="mt-3">
                <button class="btn btn-outline-danger" id="clearCartBtn">
                    <i class="fas fa-trash-alt"></i> Clear All
                </button>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card shadow-sm sticky-top" style="top: 20px;">
                <div class="card-body">
                    <h5 class="card-title mb-3">Order Summary</h5>

                    <div class="d-flex justify-content-between mb-2">
                        <span>Total items:</span>
                        <span class="fw-bold" id="totalItems">@Model.TotalItems</span>
                    </div>

                    <div class="d-flex justify-content-between mb-3 pb-3 border-bottom">
                        <span>Subtotal:</span>
                        <span class="text-danger fw-bold" id="subtotal">
                            @Model.TotalPrice.ToString("N0") $
                        </span>
                    </div>

                    <div class="d-flex justify-content-between mb-3">
                        <h5>Total:</h5>
                        <h5 class="text-danger" id="totalPrice">
                            @Model.TotalPrice.ToString("N0") $
                        </h5>
                    </div>

                    <a href="@Url.Action("Checkout", "Order")" class="btn btn-primary w-100 mb-2">
                        <i class="fas fa-credit-card"></i> Proceed to Checkout
                    </a>

                    <a href="@Url.Action("GetBookHomePage", "Book")" class="btn btn-outline-secondary w-100">
                        <i class="fas fa-shopping-bag"></i> Continue Shopping
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Increase quantity
            $('.btn-increase').click(function() {
                const bookId = $(this).data('book-id');
                const input = $(`.quantity-input[data-book-id="${bookId}"]`);
                const max = $(this).data('max');
                let currentVal = parseInt(input.val());

                if (currentVal < max) {
                    input.val(currentVal + 1);
                    updateQuantity(bookId, currentVal + 1);
                } else {
                    alert('Quantity cannot exceed available stock!');
                }
            });

            // Decrease quantity
            $('.btn-decrease').click(function() {
                const bookId = $(this).data('book-id');
                const input = $(`.quantity-input[data-book-id="${bookId}"]`);
                let currentVal = parseInt(input.val());

                if (currentVal > 1) {
                    input.val(currentVal - 1);
                    updateQuantity(bookId, currentVal - 1);
                }
            });

            // Change quantity manually
            $('.quantity-input').change(function() {
                const bookId = $(this).data('book-id');
                const quantity = parseInt($(this).val());
                const max = $(this).attr('max');

                if (quantity < 1) {
                    $(this).val(1);
                    updateQuantity(bookId, 1);
                } else if (quantity > max) {
                    $(this).val(max);
                    alert('Quantity cannot exceed available stock!');
                    updateQuantity(bookId, max);
                } else {
                    updateQuantity(bookId, quantity);
                }
            });

            // Remove single item
            $('.btn-remove').click(function() {
                if (confirm('Are you sure you want to remove this item from the cart?')) {
                    const bookId = $(this).data('book-id');
                    removeItem(bookId);
                }
            });

            // Clear entire cart
            $('#clearCartBtn').click(function() {
                if (confirm('Are you sure you want to clear your entire cart?')) {
                    clearCart();
                }
            });

            // Update quantity function
            function updateQuantity(bookId, quantity) {
                $.ajax({
                    url: '@Url.Action("UpdateQuantity", "Cart")',
                    type: 'POST',
                    data: { bookId: bookId, quantity: quantity },
                    success: function(response) {
                        if (response.success) {
                            updateCartSummary(response.totalPrice, response.totalItems);
                            updateItemSubtotal(bookId);
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function() {
                        alert('An error occurred while updating quantity');
                    }
                });
            }

            // Remove item function
            function removeItem(bookId) {
                $.ajax({
                    url: '@Url.Action("Remove", "Cart")',
                    type: 'POST',
                    data: { bookId: bookId },
                    success: function(response) {
                        if (response.success) {
                            $(`.cart-item[data-book-id="${bookId}"]`).fadeOut(300, function() {
                                $(this).remove();
                                if ($('.cart-item').length === 0) {
                                    location.reload();
                                }
                            });
                        }
                    }
                });
            }

            // Clear cart function
            function clearCart() {
                $.ajax({
                    url: '@Url.Action("Clear", "Cart")',
                    type: 'POST',
                    success: function() {
                        location.reload();
                    }
                });
            }

            // Update cart summary
            function updateCartSummary(totalPrice, totalItems) {
                $('#totalPrice').text(totalPrice.toLocaleString('en-US') + ' $');
                $('#subtotal').text(totalPrice.toLocaleString('en-US') + ' $');
                $('#totalItems').text(totalItems);
            }

            // Update subtotal for each item
            function updateItemSubtotal(bookId) {
                const item = $(`.cart-item[data-book-id="${bookId}"]`);
                const quantity = parseInt(item.find('.quantity-input').val());
                const priceText = item.find('.fw-bold.text-danger').first().text();
                const price = parseInt(priceText.replace(/[^\d]/g, ''));
                const subtotal = price * quantity;

                item.find('.item-subtotal').text(subtotal.toLocaleString('en-US') + ' $');
            }
        });
    </script>
}
