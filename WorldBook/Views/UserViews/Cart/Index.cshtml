@model WorldBook.ViewModel.CartViewModel
@{
    ViewData["Title"] = "Your Shopping Cart";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}

<div class="container my-5">
    <h2 class="mb-4">
        <i class="fas fa-shopping-cart"></i> Your Shopping Cart
    </h2>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="row">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <!-- Select All Checkbox -->
                    <div class="border-bottom pb-3 mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="selectAll">
                            <label class="form-check-label fw-bold" for="selectAll">
                                Select All Items
                            </label>
                        </div>
                    </div>

                    @foreach (var item in Model.Items)
                    {
                        <div class="cart-item border-bottom py-3" data-book-id="@item.BookId">
                            <div class="row align-items-center">
                                <!-- Checkbox Column -->
                                <div class="col-md-1 text-center">
                                    <input class="form-check-input item-checkbox"
                                           type="checkbox"
                                           data-book-id="@item.BookId"
                                           data-price="@item.BookPrice"
                                           data-quantity="@item.Quantity">
                                </div>

                                <!-- Image Column -->
                                <div class="col-md-2">
                                    <img src="@item.ImageUrl" alt="@item.BookName" class="img-fluid rounded">
                                </div>

                                <!-- Book Info Column -->
                                <div class="col-md-3">
                                    <h5 class="mb-1">@item.BookName</h5>
                                    @if (!string.IsNullOrEmpty(item.PublisherName))
                                    {
                                        <p class="text-muted small mb-0">
                                            <i class="fas fa-building"></i> @item.PublisherName
                                        </p>
                                    }
                                    <p class="text-muted small">In stock: @item.AvailableStock copies</p>
                                </div>

                                <!-- Price Column -->
                                <div class="col-md-2 text-center">
                                    <p class="fw-bold text-danger mb-0">
                                        @item.BookPrice.ToString("N0") $
                                    </p>
                                </div>

                                <!-- Quantity Column -->
                                <div class="col-md-2">
                                    <div class="input-group input-group-sm">
                                        <button class="btn btn-outline-secondary btn-decrease" type="button" data-book-id="@item.BookId">
                                            –
                                        </button>
                                        <input type="number" class="form-control text-center quantity-input"
                                               value="@item.Quantity" min="1" max="@item.AvailableStock"
                                               data-book-id="@item.BookId">
                                        <button class="btn btn-outline-secondary btn-increase" type="button"
                                                data-book-id="@item.BookId" data-max="@item.AvailableStock">
                                            +
                                        </button>
                                    </div>
                                </div>

                                <!-- Actions Column -->
                                <div class="col-md-2 text-end">
                                    <p class="fw-bold mb-2 item-subtotal">
                                        @item.Subtotal.ToString("N0") $
                                    </p>
                                    <button class="btn btn-sm btn-danger btn-remove" data-book-id="@item.BookId">
                                        <i class="fas fa-trash"></i> Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="mt-3">
                <button class="btn btn-outline-danger" id="clearCartBtn">
                    <i class="fas fa-trash-alt"></i> Clear All
                </button>
            </div>
        </div>

        <!-- Order Summary Sidebar -->
        <div class="col-lg-4">
            <div class="card shadow-sm sticky-top" style="top: 20px;">
                <div class="card-body">
                    <h5 class="card-title mb-3">Order Summary</h5>

                    <!-- Selected Items Display -->
                    <div id="selectedItemsList" class="mb-3">
                        <p class="text-muted">Please select items to order</p>
                    </div>

                    <div class="d-flex justify-content-between mb-3">
                        <h5>Total:</h5>
                        <h5 class="text-danger" id="selectedTotalPrice">
                            0 $
                        </h5>
                    </div>

                    <button id="checkoutBtn" class="btn btn-primary w-100 mb-2" disabled>
                        <i class="fas fa-credit-card"></i> Proceed to Checkout
                    </button>

                    <a href="@Url.Action("GetBookHomePage", "Book")" class="btn btn-outline-secondary w-100">
                        <i class="fas fa-shopping-bag"></i> Continue Shopping
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            let selectedItems = [];

            // Toggle individual item selection
            $('.item-checkbox').change(function() {
                updateSelectedItems();
                updateOrderSummary();
            });

            // Select/Deselect All
            $('#selectAll').change(function() {
                const isChecked = $(this).prop('checked');
                $('.item-checkbox').prop('checked', isChecked);
                updateSelectedItems();
                updateOrderSummary();
            });

            // Update selected items array
            function updateSelectedItems() {
                selectedItems = [];
                $('.item-checkbox:checked').each(function() {
                    const bookId = $(this).data('book-id');
                    const price = parseFloat($(this).data('price'));
                    const quantity = parseInt($(this).data('quantity'));
                    const name = $(this).closest('.cart-item').find('h5').first().text();

                    selectedItems.push({
                        bookId: bookId,
                        price: price,
                        quantity: quantity,
                        name: name,
                        subtotal: price * quantity
                    });
                });

                // Update "Select All" checkbox state
                const totalItems = $('.item-checkbox').length;
                const checkedItems = $('.item-checkbox:checked').length;
                $('#selectAll').prop('checked', totalItems === checkedItems && totalItems > 0);
            }

            // Update order summary display
            function updateOrderSummary() {
                const selectedCount = selectedItems.length;
                const totalPrice = selectedItems.reduce((sum, item) => sum + item.subtotal, 0);

                // Update counts and totals
                $('#selectedItemsCount').text(selectedCount);
                $('#selectedSubtotal').text(totalPrice.toLocaleString('en-US') + ' $');
                $('#selectedTotalPrice').text(totalPrice.toLocaleString('en-US') + ' $');

                // Update selected items list
                if (selectedCount > 0) {
                    let itemsHtml = '<div class="small">';
                    selectedItems.forEach(item => {
                        itemsHtml += `
                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-truncate" style="max-width: 60%;">${item.name}</span>
                                <span class="text-muted">${item.subtotal.toLocaleString('en-US')} $</span>
                            </div>
                        `;
                    });
                    itemsHtml += '</div>';
                    $('#selectedItemsList').html(itemsHtml);

                    // Enable checkout button
                    $('#checkoutBtn').prop('disabled', false);
                } else {
                    $('#selectedItemsList').html('<p class="text-muted">Please select items to order</p>');
                    $('#checkoutBtn').prop('disabled', true);
                }
            }

            // Increase quantity
            $('.btn-increase').click(function() {
                const bookId = $(this).data('book-id');
                const input = $(`.quantity-input[data-book-id="${bookId}"]`);
                const checkbox = $(`.item-checkbox[data-book-id="${bookId}"]`);
                const max = $(this).data('max');
                let currentVal = parseInt(input.val());

                if (currentVal < max) {
                    input.val(currentVal + 1);
                    checkbox.data('quantity', currentVal + 1);
                    updateQuantity(bookId, currentVal + 1);
                } else {
                    alert('Quantity cannot exceed available stock!');
                }
            });

            // Decrease quantity
            $('.btn-decrease').click(function() {
                const bookId = $(this).data('book-id');
                const input = $(`.quantity-input[data-book-id="${bookId}"]`);
                const checkbox = $(`.item-checkbox[data-book-id="${bookId}"]`);
                let currentVal = parseInt(input.val());

                if (currentVal > 1) {
                    input.val(currentVal - 1);
                    checkbox.data('quantity', currentVal - 1);
                    updateQuantity(bookId, currentVal - 1);
                }
            });

            // Change quantity manually
            $('.quantity-input').change(function() {
                const bookId = $(this).data('book-id');
                const checkbox = $(`.item-checkbox[data-book-id="${bookId}"]`);
                const quantity = parseInt($(this).val());
                const max = $(this).attr('max');

                if (quantity < 1) {
                    $(this).val(1);
                    checkbox.data('quantity', 1);
                    updateQuantity(bookId, 1);
                } else if (quantity > max) {
                    $(this).val(max);
                    checkbox.data('quantity', max);
                    alert('Quantity cannot exceed available stock!');
                    updateQuantity(bookId, max);
                } else {
                    checkbox.data('quantity', quantity);
                    updateQuantity(bookId, quantity);
                }
            });

            // Remove single item
            $('.btn-remove').click(function() {
                if (confirm('Are you sure you want to remove this item from the cart?')) {
                    const bookId = $(this).data('book-id');
                    removeItem(bookId);
                }
            });

            // Clear entire cart
            $('#clearCartBtn').click(function() {
                if (confirm('Are you sure you want to clear your entire cart?')) {
                    clearCart();
                }
            });

            // Checkout button
            $('#checkoutBtn').click(function() {
            if (selectedItems.length === 0) {
                alert('Please select at least one item to checkout!');
                return;
            }

            // Validate stock before checkout
                $.ajax({
                    url: '@Url.Action("ValidateSelectedItems", "Cart")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(selectedItems.map(item => item.bookId)),
                    success: function(response) {
                        if (response.success) {
                            // Redirect to checkout with selected items
                            const selectedBookIds = selectedItems.map(item => item.bookId);
                            window.location.href = '@Url.Action("Checkout", "Order")?selectedItems=' + selectedBookIds.join(',');
                        } else {
                            alert(response.message + '\n\n' + response.invalidItems.join('\n'));
                        }
                    },
                    error: function() {
                        alert('An error occurred. Please try again.');
                    }
                });
            });

            // Update quantity function
            function updateQuantity(bookId, quantity) {
                $.ajax({
                    url: '@Url.Action("UpdateQuantity", "Cart")',
                    type: 'POST',
                    data: { bookId: bookId, quantity: quantity },
                    success: function(response) {
                        if (response.success) {
                            updateItemSubtotal(bookId);
                            updateSelectedItems();
                            updateOrderSummary();
                        } else {
                            alert(response.message);
                        }
                    },
                    error: function() {
                        alert('An error occurred while updating quantity');
                    }
                });
            }

            // Remove item function
            function removeItem(bookId) {
                $.ajax({
                    url: '@Url.Action("Remove", "Cart")',
                    type: 'POST',
                    data: { bookId: bookId },
                    success: function(response) {
                        if (response.success) {
                            $(`.cart-item[data-book-id="${bookId}"]`).fadeOut(300, function() {
                                $(this).remove();
                                updateSelectedItems();
                                updateOrderSummary();

                                if ($('.cart-item').length === 0) {
                                    location.reload();
                                }
                            });
                        }
                    }
                });
            }

            // Clear cart function
            function clearCart() {
                $.ajax({
                    url: '@Url.Action("Clear", "Cart")',
                    type: 'POST',
                    success: function() {
                        location.reload();
                    }
                });
            }

            // Update subtotal for each item
            function updateItemSubtotal(bookId) {
                const item = $(`.cart-item[data-book-id="${bookId}"]`);
                const quantity = parseInt(item.find('.quantity-input').val());
                const priceText = item.find('.fw-bold.text-danger').first().text();
                const price = parseInt(priceText.replace(/[^\d]/g, ''));
                const subtotal = price * quantity;

                item.find('.item-subtotal').text(subtotal.toLocaleString('en-US') + ' $');
            }

            // Initialize on page load
            updateSelectedItems();
            updateOrderSummary();
        });
    </script>
}

<style>
    /* Custom checkbox styling */
    .form-check-input {
        width: 20px;
        height: 20px;
        cursor: pointer;
    }

    .item-checkbox {
        margin-top: 0;
    }

    /* Highlight selected items */
    .cart-item:has(.item-checkbox:checked) {
        background-color: #f8f9fa;
    }

    /* Order summary styling */
    #selectedItemsList {
        max-height: 200px;
        overflow-y: auto;
    }

    #selectedItemsList::-webkit-scrollbar {
        width: 6px;
    }

    #selectedItemsList::-webkit-scrollbar-thumb {
        background-color: #dee2e6;
        border-radius: 3px;
    }

    /* Disabled button styling */
    #checkoutBtn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
</style>